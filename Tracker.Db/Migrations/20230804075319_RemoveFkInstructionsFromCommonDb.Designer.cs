// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tracker.Db;

#nullable disable

namespace Tracker.Db.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230804075319_RemoveFkInstructionsFromCommonDb")]
    partial class RemoveFkInstructionsFromCommonDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("asp_net_role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("asp_net_user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("asp_net_user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("asp_net_user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("asp_net_user_tokens", (string)null);
                });

            modelBuilder.Entity("Tracker.Db.Models.Instruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("creator_id");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deadline");

                    b.Property<DateTime?>("ExecDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("exec_date");

                    b.Property<string>("ExecutorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("executor_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<string>("TreePath")
                        .HasColumnType("text")
                        .HasColumnName("tree_path");

                    b.HasKey("Id")
                        .HasName("pk_instructions");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_instructions_creator_id");

                    b.HasIndex("ExecutorId")
                        .HasDatabaseName("ix_instructions_executor_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_instructions_parent_id");

                    b.ToTable("instructions", (string)null);
                });

            modelBuilder.Entity("Tracker.Db.Models.InstructionClosure", b =>
                {
                    b.Property<int>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("Depth")
                        .HasColumnType("integer")
                        .HasColumnName("depth");

                    b.HasKey("ParentId", "Id")
                        .HasName("pk_instructions_closures");

                    b.ToTable("instructions_closures", (string)null);
                });

            modelBuilder.Entity("Tracker.Db.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("role_name_index");

                    b.ToTable("asp_net_roles", (string)null);
                });

            modelBuilder.Entity("Tracker.Db.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("BossId")
                        .HasColumnType("text")
                        .HasColumnName("boss_id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expiry_time");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("BossId")
                        .HasDatabaseName("ix_asp_net_users_boss_id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("user_name_index");

                    b.ToTable("asp_net_users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cd053e18-c8cc-49c6-858f-3ebea1a11214",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5dbc2d6d-f206-4a35-b961-542276df93b7",
                            Email = "ovcharov@parma.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "OVCHAROV@PARMA.RU",
                            NormalizedUserName = "ОВЧАРОВ",
                            PasswordHash = "AQAAAAEAACcQAAAAEFEnRRgs2cmkKDQfVcrbzbCSUSOcVIx/xk7ftlgQQmwBh+3WFNO4aEwmlXW05a0tLA==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "2KSHKNNQ42NT7L675Y6OVSM4Q6X4I3LD",
                            TwoFactorEnabled = false,
                            UserName = "Овчаров"
                        },
                        new
                        {
                            Id = "38ecb3d6-5283-4f9e-96ce-95070f4336b9",
                            AccessFailedCount = 0,
                            BossId = "cd053e18-c8cc-49c6-858f-3ebea1a11214",
                            ConcurrencyStamp = "7e238c65-17d2-464c-9539-1a1086cc104e",
                            Email = "zabaev@parma.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ZABAEV@PARMA.RU",
                            NormalizedUserName = "ЗАБАЕВ",
                            PasswordHash = "AQAAAAEAACcQAAAAEIaqLyLQtBbc+UK2GBj9ZqVOFsvVFxxiLZUKfyFhrB/oS949WKBmpGkfqILhn+3XgA==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "4TAUAMXMVQWQ67XRICFBPXTRQBCVTZG5",
                            TwoFactorEnabled = false,
                            UserName = "Забаев"
                        },
                        new
                        {
                            Id = "b5632f6a-82bf-40c5-b866-9e68c2aea758",
                            AccessFailedCount = 0,
                            BossId = "cd053e18-c8cc-49c6-858f-3ebea1a11214",
                            ConcurrencyStamp = "7f2bb0c5-2fdc-412c-873a-99d17d96e5e7",
                            Email = "kaigorodov@parma.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "KAIGORODOV@PARMA.RU",
                            NormalizedUserName = "КАЙГОРОДОВ",
                            PasswordHash = "AQAAAAEAACcQAAAAEND1bpz4qLHr+4PBxR3WaXJACxhflZ/rOFu27ajRZjgO3oInm2nAVEjwXRYPV59dAw==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "P4YC3AG3U6DMPHZOUQBT3CYPV3HP3DIN",
                            TwoFactorEnabled = false,
                            UserName = "Кайгородов"
                        },
                        new
                        {
                            Id = "55582f8a-9cad-4951-860d-97260f4a7ea5",
                            AccessFailedCount = 0,
                            BossId = "38ecb3d6-5283-4f9e-96ce-95070f4336b9",
                            ConcurrencyStamp = "dd512f73-6f64-4e36-be84-a42e8ce81e0a",
                            Email = "danilovich@parma.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "DANILOVICH@PARMA.RU",
                            NormalizedUserName = "ДАНИЛОВИЧ",
                            PasswordHash = "AQAAAAEAACcQAAAAEEjH2QBjYMPiMZlsjNKyTjFB+lmA9adM6TTCp16Zz1ijZ2I8dP+tTeDgUKchArQjvA==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "CKECHTZA744R4OFXNSHCPZ5L2ZCCTEL2",
                            TwoFactorEnabled = false,
                            UserName = "Данилович"
                        },
                        new
                        {
                            Id = "aa962b1a-8efe-4b41-a405-4b14a8ba3132",
                            AccessFailedCount = 0,
                            BossId = "38ecb3d6-5283-4f9e-96ce-95070f4336b9",
                            ConcurrencyStamp = "6e39c11d-393e-482c-9d82-cd1943c6182e",
                            Email = "ulianich@parma.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ULIANICH@PARMA.RU",
                            NormalizedUserName = "УЛЬЯНИЧ",
                            PasswordHash = "AQAAAAEAACcQAAAAELAn3ZHKO22jrcghVwJlhS0Lu46QzWeE3kxU5PjJdBhrhoY1vnhQ1ftSvM2kglIixA==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "IJBERLHWHJLGDXNGXKS4CDOU4D6LVS5H",
                            TwoFactorEnabled = false,
                            UserName = "Ульянич"
                        },
                        new
                        {
                            Id = "0db07e67-f095-483e-92c6-df523ebf1216",
                            AccessFailedCount = 0,
                            BossId = "aa962b1a-8efe-4b41-a405-4b14a8ba3132",
                            ConcurrencyStamp = "400e0f31-4c9c-4717-a868-447a9225035f",
                            Email = "gafurov@parma.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "GAFUROV@PARMA.RU",
                            NormalizedUserName = "ГАФУРОВ",
                            PasswordHash = "AQAAAAEAACcQAAAAEHAjnCxisKj1qwrOQ2UneWkNMIU121CM2Gb81/vgrKt0tkJoYnGU86L5Amnyi9iU6A==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "PAAG4SBSIFANFDT75HSHCE2DCQUTLG2A",
                            TwoFactorEnabled = false,
                            UserName = "Гафуров"
                        },
                        new
                        {
                            Id = "eddd1f09-68b1-4866-ab97-a5d8ec1dca29",
                            AccessFailedCount = 0,
                            BossId = "aa962b1a-8efe-4b41-a405-4b14a8ba3132",
                            ConcurrencyStamp = "556b8e31-440c-4c02-88c2-423d51eac728",
                            Email = "gnatenko@parma.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "GNATENKO@PARMA.RU",
                            NormalizedUserName = "ГНАТЕНКО",
                            PasswordHash = "AQAAAAEAACcQAAAAEExRWYZPxxKRM5uc7Z71XWTJWazEF2QI0h7qjYg56CAqkYLb1LrHcRAXWSExXT7Hxw==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "LTFDNXABYK6S6GFSQ45Z3P53ZES37CYU",
                            TwoFactorEnabled = false,
                            UserName = "Гнатенко"
                        },
                        new
                        {
                            Id = "dd4e5a59-d500-4751-8fa3-41ecbc2c4f74",
                            AccessFailedCount = 0,
                            BossId = "eddd1f09-68b1-4866-ab97-a5d8ec1dca29",
                            ConcurrencyStamp = "a44ccabb-d0b0-4ed0-b21f-220df496faf8",
                            Email = "akulov@parma.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "AKULOV@PARMA.RU",
                            NormalizedUserName = "АКУЛОВ",
                            PasswordHash = "AQAAAAEAACcQAAAAEB0Y5Qvc5qoXCPyXkl9qnqN4qAxK+s3c7BXFEYrz2sAme0aP+OiSGbJDoI0kqYp5Iw==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "7K3DKPHVEOLYWOGSG2DDQAIRYUWPXUKZ",
                            TwoFactorEnabled = false,
                            UserName = "Акулов"
                        },
                        new
                        {
                            Id = "7dd58573-7954-4e6f-8b0e-00420623038b",
                            AccessFailedCount = 0,
                            BossId = "eddd1f09-68b1-4866-ab97-a5d8ec1dca29",
                            ConcurrencyStamp = "9d22ab6b-e6af-4bcd-84bd-6181f84d2339",
                            Email = "riabov@parma.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "RIABOV@PARMA.RU",
                            NormalizedUserName = "РЯБОВ",
                            PasswordHash = "AQAAAAEAACcQAAAAEBrWLnyojv3+rSiOi8yjVOyLlUwGimzkTsm8bhpiwX2f0AehPadeh83MzFVmgfDlfg==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "5RYINNTABKGFBUNWXT4S34U4W76CSYUW",
                            TwoFactorEnabled = false,
                            UserName = "Рябов"
                        },
                        new
                        {
                            Id = "d762b196-be23-43fb-8033-c69ac3bde570",
                            AccessFailedCount = 0,
                            BossId = "aa962b1a-8efe-4b41-a405-4b14a8ba3132",
                            ConcurrencyStamp = "3154a3b7-14d2-45ea-9777-97b7e1b738dd",
                            Email = "shelev@parma.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "SHELEV@PARMA.RU",
                            NormalizedUserName = "ЩЕЛЕВ",
                            PasswordHash = "AQAAAAEAACcQAAAAEC5kctewaWAta9yCoMjIvr70JW6CylsjL7FUQsLUyhf689uQ7zENp+IN1r5r9OFuZg==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "2UDDP34D22GXRMCEJW7R6SSCSYNIPDFV",
                            TwoFactorEnabled = false,
                            UserName = "Щелев"
                        },
                        new
                        {
                            Id = "32f2b280-6fec-477c-8426-37bf5d723053",
                            AccessFailedCount = 0,
                            BossId = "d762b196-be23-43fb-8033-c69ac3bde570",
                            ConcurrencyStamp = "d9b116a5-6229-49a0-80ce-662a50b6a6c1",
                            Email = "ishenko@parma.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ISHENKO@PARMA.RU",
                            NormalizedUserName = "ИЩЕНКО",
                            PasswordHash = "AQAAAAEAACcQAAAAENDw0Cqm9pFAemewVLecq+VLSUYLnqAyEGaxVVDiVS1rELeHEQkc3FXc6WmOmQYZSA==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "OF6L2TCA3KYZMQ2FEWJEMPSJU5FUIW5G",
                            TwoFactorEnabled = false,
                            UserName = "Ищенко"
                        },
                        new
                        {
                            Id = "a37016ab-275d-43c9-ad27-25c83c0451a3",
                            AccessFailedCount = 0,
                            BossId = "d762b196-be23-43fb-8033-c69ac3bde570",
                            ConcurrencyStamp = "21279090-a23e-44ab-b414-311643a99442",
                            Email = "melnikov@parma.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "MELNIKOV@PARMA.RU",
                            NormalizedUserName = "МЕЛЬНИКОВ",
                            PasswordHash = "AQAAAAEAACcQAAAAEO6Pavg6HVeSipcFDD8cPxzD0eanrA0HhiIk+qWgl3RQxCm6X5nfmtDtPFeE73JHmA==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "4SFQU4ZZFNIM4UKHRVNLWNQ3RETBF4RQ",
                            TwoFactorEnabled = false,
                            UserName = "Мельников"
                        },
                        new
                        {
                            Id = "d2b000e0-d352-4532-9b56-3ecce303a168",
                            AccessFailedCount = 0,
                            BossId = "a37016ab-275d-43c9-ad27-25c83c0451a3",
                            ConcurrencyStamp = "491ed8a7-c70d-4325-b498-256c2dc957c1",
                            Email = "veretennikova@parma.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "VERETENNIKOVA@PARMA.RU",
                            NormalizedUserName = "ВЕРЕТЕННИКОВА",
                            PasswordHash = "AQAAAAEAACcQAAAAEDqroat9CObt+PE4EuSnzETkonj1NvylMVtiPYAMC1E9fkQkwJAH4RZYYyI8zTPxQg==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "PE7NWJHMCYMHI23RBE3X6LSLVDMOSA7M",
                            TwoFactorEnabled = false,
                            UserName = "Веретенникова"
                        },
                        new
                        {
                            Id = "aa8196f8-0237-4600-9cf2-dc91f08e6122",
                            AccessFailedCount = 0,
                            BossId = "a37016ab-275d-43c9-ad27-25c83c0451a3",
                            ConcurrencyStamp = "84fd4cd2-b426-4abc-8125-cf622717c2b7",
                            Email = "korepanov@parma.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "KOREPANOV@PARMA.RU",
                            NormalizedUserName = "КОРЕПАНОВ",
                            PasswordHash = "AQAAAAEAACcQAAAAEBmReKZLUkZVkRT+JsQTJj/SXxKUtguETPSCN8BV2y6C1O/sZGm8/fn8Ec14ABkTSw==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "ZRIYT7IRMVPLH2NKL7EKW7SVJ26LWPML",
                            TwoFactorEnabled = false,
                            UserName = "Корепанов"
                        },
                        new
                        {
                            Id = "5ed8c7bc-0d09-4f95-81b4-2668110e255f",
                            AccessFailedCount = 0,
                            BossId = "aa8196f8-0237-4600-9cf2-dc91f08e6122",
                            ConcurrencyStamp = "10619377-550f-49d4-81dc-09b38b2a870d",
                            Email = "vatrubin@parma.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "VATRUBIN@PARMA.RU",
                            NormalizedUserName = "ВАТРУБИН",
                            PasswordHash = "AQAAAAEAACcQAAAAENJZp1M7wFY9ATnuSwbo7hMb9GZFXOJbZwG+Wt6txo5NiOFwKfRO6nFGgslqRgBEhw==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "6RNC3NLA727K35JJVYREQP4U6ZJIT2SE",
                            TwoFactorEnabled = false,
                            UserName = "Ватрубин"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Tracker.Db.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Tracker.Db.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Tracker.Db.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Tracker.Db.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Tracker.Db.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Tracker.Db.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Tracker.Db.Models.Instruction", b =>
                {
                    b.HasOne("Tracker.Db.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_instructions_users_creator_id");

                    b.HasOne("Tracker.Db.Models.User", "Executor")
                        .WithMany()
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_instructions_users_executor_id");

                    b.HasOne("Tracker.Db.Models.Instruction", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_instructions_instructions_parent_id");

                    b.Navigation("Creator");

                    b.Navigation("Executor");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Tracker.Db.Models.User", b =>
                {
                    b.HasOne("Tracker.Db.Models.User", "Boss")
                        .WithMany("Children")
                        .HasForeignKey("BossId")
                        .HasConstraintName("fk_asp_net_users_asp_net_users_boss_id");

                    b.Navigation("Boss");
                });

            modelBuilder.Entity("Tracker.Db.Models.Instruction", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Tracker.Db.Models.User", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
